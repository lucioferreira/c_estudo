Formato das mensagens:
envio:
id_usuario: id do usuario logado na sesssão
comando: comando a ser enviado (ação + objetivo)
parametros: parâmetros variáveis de acordo com o comando
ex.: {"id_usuario":"12", "cmd":"listar_mesas"}

retorno
positivo:
status: "ok" + comando
resposta: valores de retorno
ex.: {"status":"ok listar_mesas",
       "resposta":"[{"id":1,"titulo":"Mesa 01","status":1},{"id":2,"titulo":"Mesa 02","status":1}]"}

negativo:
status: "erro" + comando
resposta: mensagem de erro
ex.: {"status":"erro atualizar_status_mesa", "resposta":"mesa inexistente"}

/*
* listar_mesa
* retorna a lista de mesas cadastrados no sistema
* parametros
* ================
* entrada: id_usuario, comando (cmd)
* resposta: status da requisicao( status + cmd )
            array <id da mesa (id_mesa), titulo da mesa(titulo_mesa), status(status)>
* obs:
*  O status da mesa esta sincronizada com o statius do ultimo pedido.
*    Ao abrir ou fechar o pedido, o status da mesa tambem é atualizado
* status:
*    webserver: iniciado - não testado
*    app: em desenvolvimento
*/

/*
* listar_cardapio
*  retorna a lista dos itens do cardapio cadastrado no sistema
* parametros:
* entrada: id_usuario, comando (cmd)
* resposta: status da requisicao( status + cmd )
*            array <id do cardapio (id), categoria(cat), titulo (titulo),
*			       descrição breve (descr_breve), valor (valor)>
* status:
*    webserver: iniciado - não testado
*    app: em desenvolvimento
*/

﻿/*
* autenticar_usuario
*  Autentica sessao de uso de usuario
*  Retorna id do usario do sistema
*  erro caso usuario inexistente
* parametros: usuario, senha
* retorno: id_usuario positivo quando ok
* status:
*    webserver: ok, sem testes
*    app: em desenvolvimento
*/

/*
* listar_categoria
*  retorna a lista de categorias dos itens do cardapio
* parametros:
* retorno: lista <id, categoria>
* status:
*    webserver: ok
*    app: em desenvolvimento
*/

/*
* lista_cardapio_imagem
*  retorna a imagem de um item do cxardapio cadastrado no sistema
* parametros: id_cardapio
* retorno: nome_imagem, imagem (string base64)
* status:
*    webserver: ok
*    app: em desenvolvimento
*/

/*
* abrir_pedido
*  abre uma determinada mesa para inicio de pedido
*      com uma mesa associada a esse atendimento.
*     (gera um identificador que é o novo rowid de pedidos)
*  nao podem ser abertos pedidos para uma mesa já aberta.
*  o status da mesa deve mudar para indicar q está em atendimento
* parametros:
* entrada: id_usuario, id_mesa, comando (cmd)
* retorno: id_pedido
* obs:
*  o status da mesa é atualizada na tabela mesa

	TODO: confirmar Status da mesa
	1 - Livre
	2 - Em atendimento
	3 - Reservada
	4 - Conjugada (ligada a outra mesa)

* status:
*    webserver: ok
*    app: em desenvolvimento
*/

/*
* fecha_pedido
*  fecha uma determinada mesa para finalizacao de pedido
* parametros: id_pedido, id_usuario
* retorno:
* obs:
*  usar essa API somente depois do pagamento total ser efetuado
*  o status da mesa é atualizada na tabela mesa
* status:
*    webserver: ok
*    app: em desenvolvimento
*/

/*
* registra_item_pedido
*  envia item do cardapio para compor o pedido
* parametros: id_pedido, id_usuario, id_item_cardapio,
*             valor, quantidade, customizacao
* retorno:
* obs:
*  ao adicionar um item, o valor do item eh acumulado na tabela de pedido no campo ped_valor_pedido
*    de acordo com o valor * quantidade.
* status:
*    webserver: ok
*    app: em desenvolvimento
*/


/*
* pagamento_pedido
*  efetua pagamento total ou parcial de um pedido aberto
* parametros:
     id_pedido
     categoria: enum (total, parcial)
     id_tipo_pagamento
     valor
* retorno:
* obs:
*   pagamento com categoria "total": irá gerar um registro apenas na tabela pagamento e
*       atualização na tabela pedido no campo ped_valor_pago
*       Chamar logo em seguida a API fecha_pedido.
*   pagamento com categoria "parcial": irá gerar vários registros na tabela pagamento,
*       um registro para cada parcial. Ao final de todos os pagamentos parciais, chamar
*       a API fecha_pedido. Os lançamentos parciais serão acumulados no campo ped_valor_pago na
*       tabela pedido.
*    webserver: ok
*    app: em desenvolvimento
*/


/*
* lista_tipo_pagamento
*  retorna a lista dos tipos de pagamento
* parametros:
* retorno: lista <id, descrição, tipo>
* obs:
*  o campo tpag_tipo é um enum, para fins de agrupamento nos relatórios financeiros:
     cr: crédito
     db: débido
     dn: dinheiro
     ca: cartão alimentação
*  Essa API é usada no fechamento da mesa (pagamento) total ou parcial.
* status:
*    webserver: ok
*    app: em desenvolvimento
*/


/*
* lista_pedidos
*  retorna lista de pedidos
* parametros:
     id_atendimento
     status: enum (aberto, pago)
     data_abertura: opcional (formato "aaaa-mm-dd hh:mm:ss" )
      retornar os pedidos a partir da data de abertura especificada, caso preenchido
* retorno: lista <pedidos>
*     especificar os campos de retorno
* obs:
*   No cenário de um device perder as informações de atendimento (quebrar, ficar sem bateria, etc...),
*     basta fazer a pesquisa por id_mesa e retornará o ultimo pedido.
* status: em desenvolvimento
*/

TODO:
adicionar o parametro id_mesa a API lista_pedidos para agilizar na pesquisa

Perguntas:
